variables:
  GO111MODULE: "on"

before_script:
  - echo $CI_BUILD_REF
  - echo $CI_COMMIT_REF_SLUG
  - echo $CI_PROJECT_DIR
  - echo $GOPROXY
  - echo $GO111MODULE
  - ls -la
  - chmod +x scripts/* && cp scripts/* /usr/local/bin

stages:
  - build
  - verify
  - containerize

#build_static:
#  image: openjdk:8-jdk
#  stage: .pre
#  allow_failure: false
#  variables:
#    ANDROID_COMPILE_SDK: "28"
#    ANDROID_BUILD_TOOLS: "28.0.2"
#    ANDROID_SDK_TOOLS:   "4333796"
#    FLUTTER_VERSION: "https://storage.googleapis.com/flutter_infra/releases/beta/linux/flutter_linux_1.17.0-dev.3.1-beta.tar.xz"
#  before_script:
#    - apt-get --quiet update --yes
#    - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
#    - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
#    - unzip -d android-sdk-linux android-sdk.zip
#    - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
#    - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
#    - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
#    - export ANDROID_HOME=$PWD/android-sdk-linux
#    - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
#    # temporarily disable checking for EPIPE error and use yes to accept all licenses
#    - set +o pipefail
#    - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
#    - set -o pipefail
#    # flutter sdk setup
#    - wget --output-document=flutter-sdk.tar.xz $FLUTTER_VERSION
#    - tar -xf flutter-sdk.tar.xz
#    - export PATH=$PATH:$PWD/flutter/bin
#    #- echo flutter.sdk=$PWD/flutter > android/local.properties
#  #tags:
#    #- unix
#    #- docker
#    #- multi
#  script:
#    - cd ./app
#    - flutter config --enable-web
#    - flutter pub get
#    - flutter build web
#    - cd ..
#    - mv ./app/build/web ./static
#    - cd ./static
#    - ls -la

build_app:
  image: golang:1.13.3
  stage: build
  allow_failure: false
  script:
    - go mod download
    - export VERSION=$(git-semver-describe --tags)
    - echo $VERSION
    - GOOS=linux GOARCH=amd64 go build -tags build -o communeism .
    - mkdir $CI_PROJECT_DIR/release
    - mv ./communeism $CI_PROJECT_DIR/release
  artifacts:
    paths:
      - $CI_PROJECT_DIR/release

go_test:
  image: golang:1.13.3
  stage: verify
  allow_failure: false
  script:
    - go mod download
    - go test -tags testing -race -cover ./...

golangci-lint:
  image: golang:1.13.3
  stage: verify
  allow_failure: true
  script:
    - go mod download
    - golangci-lint.sh -b $(go env GOPATH)/bin v1.21.0
    - cd $CI_PROJECT_DIR
    - golangci-lint run

gomod-check:
  image: golang:1.13.3
  stage: verify
  allow_failure: true
  script:
    - go mod download
    - go_mod_tidy.sh

containerize_app:
  image: docker:stable
  stage: containerize
  allow_failure: false
  only:
    - tags
  before_script:
    - df
    - cat /etc/resolv.conf
    - cat /etc/hosts
  script:
    - echo $CI_COMMIT_TAG
    - echo $IMAGE_TAG
    - echo $CI_REGISTRY_IMAGE
    - echo $CI_COMMIT_REF_SLUG
    - docker run --rm --privileged  169.254.169.254:2376
    - docker build -t communeism:$CI_COMMIT_TAG -f ./Dockerfile .
    - docker push $IMAGE_TAG
    - docker rmi $(docker images --quiet --filter "dangling=true") || true
    - docker volume rm $(docker volume ls -qf dangling=true) || true